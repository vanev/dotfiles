#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s="${red}∆";
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s="${red}∆";
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s="${red}∆";
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s="${red}∆";
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" ${s}";

    echo -e "${1}${branchName}${s}";
  else
    return;
  fi;
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  black=$(tput setaf 0);
  red=$(tput setaf 1);
  green=$(tput setaf 2);
  yellow=$(tput setaf 3);
  blue=$(tput setaf 4);
  magenta=$(tput setaf 5);
  cyan=$(tput setaf 6);
  white=$(tput setaf 7);
  bright_black=$(tput setaf 8);
  bright_red=$(tput setaf 9);
  bright_green=$(tput setaf 10);
  bright_yellow=$(tput setaf 11);
  bright_blue=$(tput setaf 12);
  bright_magenta=$(tput setaf 13);
  bright_cyan=$(tput setaf 14);
  bright_white=$(tput setaf 15);
else
  bold='';
  reset="\e\[0m";
  black="\e\[1;30m";
  blue="\e\[1;34m";
  cyan="\e\[1;36m";
  green="\e\[1;32m";
  orange="\e\[1;33m";
  purple="\e\[1;35m";
  red="\e\[1;31m";
  violet="\e\[1;35m";
  white="\e\[1;37m";
  yellow="\e\[1;33m";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\W\007\]";
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${bright_black}\]\W"; # working directory
PS1+="\$(prompt_git \"${black}:${green}\")"; # Git repository details
PS1+="\[${reset}\] » "; # prompt
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
